CREATE OR REPLACE VIEW assetmgmt.assettpaview AS 
 SELECT a.entityid,
    a.isdeleted,
    a.organizationid,
    a.assetname,
    a.assetstatus,
    a.assettag,
    a.deliverychallanno,
    a.depreciation,
    a.eol,
    a.location,
    a.notes,
    a.orderno,
    a.productid,
    a.projectname AS projectid,
    a.purchasedate,
    a.serialno,
    a.vendorname,
    a.warrantytilldate,
    p.category,
    p.productname,
    p.subcategory,
    l.state,
    l.district,
    l.city,
    l.policestation,
    l.locationid,
    pr.projectname,
    p.manufacturer,
    p.model
   FROM assetmgmt.assetmaster a
     LEFT JOIN assetmgmt.productmaster p ON a.productid = p.entityid
     LEFT JOIN locationmaster l ON a.location::text = l.locationid::text
     LEFT JOIN projectmgmt.project pr ON a.projectname = pr.entityid
  WHERE (p.category::text <> ALL (ARRAY['Power Supply'::character varying::text, 'Fiber'::character varying::text])) OR p.category::text = 'Fiber'::text AND a.projectname::text = 'EDGE RC I'::text;

ALTER TABLE assetmgmt.assettpaview
  OWNER TO postgres;
CREATE OR REPLACE VIEW assetmgmt.assetview AS 
 SELECT a.entityid,
    a.isdeleted,
    a.organizationid,
    a.assetname,
    a.assetstatus,
    a.assettag,
    a.deliverychallanno,
    a.depreciation,
    a.eol,
    a.location,
    a.notes,
    a.orderno,
    a.productid,
    a.projectname AS projectid,
    a.purchasedate,
    a.serialno,
    a.vendorname,
    a.warrantytilldate,
    p.category,
    p.productname,
    p.subcategory,
    l.state,
    l.district,
    l.city,
    l.policestation,
    l.locationid,
    pr.projectname,
    p.manufacturer,
    p.model
   FROM assetmgmt.assetmaster a
     LEFT JOIN assetmgmt.productmaster p ON a.productid = p.entityid
     LEFT JOIN locationmaster l ON a.location::text = l.locationid::text
     LEFT JOIN projectmgmt.project pr ON a.projectname = pr.entityid;

ALTER TABLE assetmgmt.assetview
  OWNER TO postgres;

  CREATE OR REPLACE VIEW assetmgmt.dcassetview AS 
 SELECT d.dcid,
    d.assetid,
    a.assetname,
    a.assetstatus,
    a.assettag,
    a.deliverychallanno,
    a.depreciation,
    a.eol,
    a.location,
    a.notes,
    a.orderno,
    a.productid,
    a.projectname AS projectid,
    a.purchasedate,
    a.serialno,
    a.vendorname,
    a.warrantytilldate,
    p.category,
    p.productname,
    p.subcategory,
    l.state,
    l.district,
    l.city,
    l.policestation,
    l.locationid,
    pr.projectname,
    p.manufacturer,
    p.model
   FROM assetmgmt.delivery_challan_asset d
     LEFT JOIN assetmgmt.assetmaster a ON d.assetid = a.entityid
     LEFT JOIN assetmgmt.productmaster p ON a.productid = p.entityid
     LEFT JOIN locationmaster l ON a.location::text = l.locationid::text
     LEFT JOIN projectmgmt.project pr ON a.projectname = pr.entityid;

ALTER TABLE assetmgmt.dcassetview
  OWNER TO postgres;

CREATE OR REPLACE VIEW assetmgmt.dcview AS 
 SELECT dc.entityid,
    dc.isdeleted,
    dc.organizationid,
    dc.challanattachment,
    dc.consigneecontact,
    dc.consigneename,
    dc.consignor,
    dc.contactperson,
    dc.dcdate,
    dc.dcno,
    dc.fulladdress,
    dc.gstno,
    dc.mobileno,
    dc.printflag,
    dc.projectname AS projectid,
    dc.shippedto,
    p.party_name AS partyname,
    concat(a.address1, ' ', a.address2, ' ', a.landmark, ' ', a.city, ' ', a.district, ' ', a.state, ' ', a.country, ' - ', a.pin_code) AS address,
    pr.projectname,
    dc.uploadflag
   FROM assetmgmt.deliverchallan dc
     LEFT JOIN ordermgmt.addressmaster a ON a.entityid = dc.fulladdress
     LEFT JOIN ordermgmt.partymaster p ON p.entityid = dc.consignor
     LEFT JOIN projectmgmt.project pr ON dc.projectname = pr.entityid;

ALTER TABLE assetmgmt.dcview
  OWNER TO postgres;

  CREATE OR REPLACE VIEW assetmgmt.interdistrict_dc_view AS 
 SELECT dc.entityid,
    dc.isdeleted,
    dc.organizationid,
    dc.challanattachment,
    dc.consigneecontact,
    dc.consigneename,
    dc.contactperson,
    dc.dcdate,
    dc.dcno,
    dc.mobileno,
    dc.printflag,
    dc.projectname AS projectid,
    dc.shippedto,
    pr.projectname,
    dc.dcstatus,
    task.entityid AS taskid
   FROM assetmgmt.interdistrictdc dc
     LEFT JOIN projectmgmt.project pr ON dc.projectname = pr.entityid
     LEFT JOIN assetmgmt.interdistrict_dc_taskmaster task ON task.dcno::text = dc.dcno::text;

ALTER TABLE assetmgmt.interdistrict_dc_view
  OWNER TO postgres;

  CREATE OR REPLACE VIEW assetmgmt.oem_dc_view AS 
 SELECT dc.entityid,
    dc.isdeleted,
    dc.organizationid,
    dc.challanattachment,
    dc.consigneecontact,
    dc.consigneename,
    dc.dcdate,
    dc.dcno,
    dc.printflag,
    dc.projectname AS projectid,
    dc.shippedto,
    pr.projectname,
    dc.dcstatus,
    task.entityid AS taskid
   FROM assetmgmt.oem_deliverchallan dc
     LEFT JOIN projectmgmt.project pr ON dc.projectname = pr.entityid
     LEFT JOIN assetmgmt.oem_dc_taskmaster task ON task.dcno::text = dc.dcno::text;

ALTER TABLE assetmgmt.oem_dc_view
  OWNER TO postgres;
  
  CREATE OR REPLACE VIEW authentication.user_view AS 
 SELECT p.entityid,
    p.employeecode,
    concat(p.firstname, ' ', p.lastname) AS profilename,
    p.emailid AS useremail,
    p.managerid,
    concat(up.firstname, ' ', up.lastname) AS managername,
    up.emailid AS manager
   FROM authentication.userprofile p
     JOIN authentication.userprofile up ON p.managerid = up.entityid;

ALTER TABLE authentication.user_view
  OWNER TO postgres;

  CREATE OR REPLACE VIEW billingmgmt.billingcomparsion AS 
 SELECT bs.amountofbilling,
    i.invoiceno,
    i.invoicestatus,
    i.milestoneno,
    i.projectid,
    i.totalamount,
    bs.amountofbilling - i.totalamount AS difference
   FROM billingmgmt.billing_schedule bs
     LEFT JOIN billingmgmt.invoice_master i ON i.milestoneno::text = bs.milestoneno::text AND i.projectid = bs.projectid
  WHERE i.invoicestatus::text = 'ACKNOWLEDGED'::text AND (bs.milestoneno::text IN ( SELECT invoice_master.milestoneno
           FROM billingmgmt.invoice_master));

ALTER TABLE billingmgmt.billingcomparsion
  OWNER TO postgres;

  CREATE OR REPLACE VIEW billingmgmt.collection_task_view AS 
 SELECT c.collectiondate,
    c.collectionstatus,
    c.invoiceid,
    i.invoiceno,
    c.netamountcredieted,
    c.projectid,
    pr.projectname,
    c.utrno,
    ct.collectionid,
    ct.entityid AS taskid,
    t.approvalstatus,
    t.workflowname
   FROM billingmgmt.collectiontask ct
     LEFT JOIN billingmgmt.collection_tagging c ON ct.collectionid = c.entityid
     LEFT JOIN billingmgmt.invoice_master i ON i.entityid = c.invoiceid
     LEFT JOIN projectmgmt.project pr ON c.projectid = pr.entityid
     LEFT JOIN taskmaster t ON t.entityid = ct.entityid;

ALTER TABLE billingmgmt.collection_task_view
  OWNER TO postgres;
  CREATE OR REPLACE VIEW billingmgmt.collectionview AS 
 SELECT c.entityid,
    c.collectiondate,
    c.projectid,
    pr.projectname,
    pr.projectpin,
    c.collectionstatus,
    c.deductiondescription,
    c.gsttdsdeducted,
    c.netamountcredieted,
    c.otherdeducted,
    c.tdsdeducted,
    c.uploadpaymentadvice,
    c.invoiceid,
    i.invoiceno,
    c.utrno,
    c.isdeleted
   FROM billingmgmt.collection_tagging c
     LEFT JOIN billingmgmt.invoice_master i ON i.entityid = c.invoiceid
     LEFT JOIN projectmgmt.project pr ON c.projectid = pr.entityid;

CREATE OR REPLACE VIEW billingmgmt.invoice_ageing_report AS 
 SELECT i.customer,
    p.party_name AS customername,
    i.projectid,
    i.milestoneno,
    pr.projectname,
    pr.projectpin,
    i.totalamount,
    i.invoicedate,
    i.invoiceno,
    i.entityid,
    i.isdeleted,
    'now'::text::date - to_date(to_char(to_timestamp((i.invoicedate::numeric / 1000.0)::double precision), 'DD/MM/YYYY'::text), 'DD/MM/YYYY'::text) AS ageingsince
   FROM billingmgmt.invoice_master i
     LEFT JOIN projectmgmt.project pr ON i.projectid = pr.entityid
     LEFT JOIN ordermgmt.partymaster p ON p.entityid = i.customer
  WHERE NOT (i.entityid IN ( SELECT collection_tagging.invoiceid
           FROM billingmgmt.collection_tagging)) AND i.invoicestatus::text = 'ACKNOWLEDGED'::text AND i.isdeleted = false AND 'now'::text::date >= (to_date(to_char(to_timestamp((i.invoicedate::numeric / 1000.0)::double precision), 'DD/MM/YYYY'::text), 'DD/MM/YYYY'::text) + '30 days'::interval);

ALTER TABLE billingmgmt.invoice_ageing_report
  OWNER TO postgres;

  CREATE OR REPLACE VIEW billingmgmt.invoice_task_view AS 
 SELECT i.customer,
    p.party_name AS customername,
    i.projectid,
    i.milestoneno,
    pr.projectname,
    pr.projectpin,
    i.invoicestatus,
    i.totalamount,
    i.invoicedate,
    i.invoiceno,
    i.pono,
    it.invoiceid,
    it.entityid AS taskid,
    t.approvalstatus,
    t.workflowname
   FROM billingmgmt.invoicetask it
     LEFT JOIN billingmgmt.invoice_master i ON i.entityid = it.invoiceid
     LEFT JOIN projectmgmt.project pr ON i.projectid = pr.entityid
     LEFT JOIN ordermgmt.addressmaster a ON a.entityid = i.customeraddress
     LEFT JOIN taskmaster t ON t.entityid = it.entityid
     LEFT JOIN ordermgmt.partymaster p ON p.entityid = i.customer;

ALTER TABLE billingmgmt.invoice_task_view
  OWNER TO postgres;

  CREATE OR REPLACE VIEW billingmgmt.invoiceview AS 
 SELECT i.entityid,
    i.customer,
    i.customeraddress,
    p.party_name AS customername,
    i.gstno,
    i.projectid,
    i.milestoneno,
    pr.projectname,
    pr.projectpin,
    i.invoicestatus,
    i.totalamount,
    i.accountexcel,
    i.amountwithouttax,
    i.amountwithtax,
    i.invoicedate,
    i.invoiceexcel,
    i.invoiceno,
    i.invoicesupportingdoc,
    i.isdeleted,
    i.panno,
    i.pono,
    concat(a.address1, ' ', a.address2, ' ', a.landmark, ' ', a.city, ' ', a.district, ' ', a.state, ' ', a.country, ' - ', a.pin_code) AS address
   FROM billingmgmt.invoice_master i
     LEFT JOIN projectmgmt.project pr ON i.projectid = pr.entityid
     LEFT JOIN ordermgmt.addressmaster a ON a.entityid = i.customeraddress
     LEFT JOIN ordermgmt.partymaster p ON p.entityid = i.customer;

ALTER TABLE billingmgmt.invoiceview
  OWNER TO postgres;
  
  CREATE OR REPLACE VIEW ordermgmt.po_task_view AS 
 SELECT pt.entityid,
    pt.po_id,
    pt.po_rc_flag,
    pt.upload_file,
    t.createdby,
    t.createddate,
    t.isdeleted,
    t.organizationid,
    t.updatedby,
    t.updateddate,
    t.approvalstatus,
    t.assigntorole,
    t.assigntouser,
    t.remark,
    t.stagename,
    t.workflowname,
    po.purchase_order_no,
    po.approval_status AS po_approval_status,
    po.supplier_name,
    po.account_name,
    po.organisation_id
   FROM ordermgmt.potaskmaster pt
     LEFT JOIN taskmaster t ON pt.entityid::bpchar = t.entityid::bpchar
     LEFT JOIN ordermgmt.purchase_order_master po ON pt.po_id::bpchar = po.entityid::bpchar;

ALTER TABLE ordermgmt.po_task_view
  OWNER TO postgres;
CREATE OR REPLACE VIEW ordermgmt.product_details_view AS 
 SELECT pd.entityid,
    pd.createdby,
    pd.createddate,
    pd.isdeleted,
    pd.organizationid,
    pd.updatedby,
    pd.updateddate,
    pd.amount,
    pd.base_uom_data,
    pd.cgst,
    pd.cgst_amount,
    pd.description,
    pd.discount,
    pd.discount_amount,
    pd.final_amount,
    pd.hsn_id,
    pd.igst,
    pd.igst_amount,
    pd.product_name,
    pd.product_name_with_desc,
    pd.quantity,
    pd.rate,
    pd.service_tax,
    pd.sgst,
    pd.sgst_amount,
    pd.total_amount,
    pd.total_discount,
    pd.vat,
    pd.purchase_order_no,
    pm.productname AS product,
    pm.description AS product_desc,
    pm.baseuom,
    hm.entityid AS tax_id
   FROM ordermgmt.product_details pd
     LEFT JOIN assetmgmt.productmaster pm ON pd.product_name::bpchar = pm.entityid::bpchar
     LEFT JOIN assetmgmt.hsnmaster hm ON pd.hsn_id::bpchar = hm.hsncode::bpchar;

ALTER TABLE ordermgmt.product_details_view
  OWNER TO postgres;

  CREATE OR REPLACE VIEW ordermgmt.prs_task_view AS 
 SELECT pt.entityid AS taskid,
    t.approvalstatus,
    t.workflowname,
    t.assigntorole,
    t.assigntouser,
    pt.prs_id,
    p.prs_no,
    p.prs_date,
    p.purchase_order_no,
    p.issue_cheque_to,
    p.invoice_no,
    p.invoice_date,
    p.invoice_amount,
    p.payment_due_date,
    p.description,
    p.note,
    p.department,
    p.project_name,
    p.approval_status,
    p.location,
    p.request_by,
    p.approved_by,
    p.signature,
    p.checklist,
    p.invoice_file_upload,
    p.createdby,
    p.createddate,
    p.updatedby,
    p.updateddate,
    p.quotation,
    p.po_copy,
    p.checked_invoice_copy,
    p.supporting_documents,
    p.approval,
    p.grn_id,
    p.is_utility_payment,
    p.office,
    p.bill_type,
    p.bill_no,
    p.attached_bill,
    p.isdeleted,
    p.organizationid,
    po.purchase_order_no AS purchase_order_number,
    COALESCE(po.total_without_taxes, 0::numeric::double precision) AS total_without_taxes,
    COALESCE(po.total_taxes, 0::numeric::double precision) AS total_taxes,
    COALESCE(po.grand_total, 0::numeric::double precision) AS grand_total,
    po.currency,
    COALESCE(curr.inr_value, 0::numeric::double precision) AS inr_value,
    COALESCE(po.grand_total, 0::numeric::double precision) * COALESCE(curr.inr_value, 0::numeric::double precision) AS po_grand_total_inr,
    pm.projectname AS project,
    pm.projectpin,
    pa.party_name,
        CASE
            WHEN p.purchase_order_no IS NULL THEN p.invoice_amount
            WHEN p.purchase_order_no IS NOT NULL THEN COALESCE(p.invoice_amount, 0::numeric::double precision) * COALESCE(curr.inr_value, 0::numeric::double precision)
            ELSE NULL::numeric::double precision
        END AS invoice_amt_inr
   FROM ordermgmt.prstask pt
     LEFT JOIN ordermgmt.prs_master p ON pt.prs_id::bpchar = p.entityid::bpchar
     LEFT JOIN projectmgmt.project pm ON p.project_name::bpchar = pm.entityid::bpchar
     LEFT JOIN ordermgmt.partymaster pa ON p.issue_cheque_to::bpchar = pa.entityid::bpchar
     LEFT JOIN ordermgmt.purchase_order_master po ON p.purchase_order_no::bpchar = po.entityid::bpchar
     LEFT JOIN ticketmgmt.currencymaster curr ON po.currency::bpchar = curr.currency_name::bpchar
     LEFT JOIN taskmaster t ON t.entityid = pt.entityid;

ALTER TABLE ordermgmt.prs_task_view
  OWNER TO postgres;
  CREATE OR REPLACE VIEW ordermgmt.prs_view AS 
 SELECT p.entityid,
    p.prs_no,
    p.prs_date,
    p.purchase_order_no,
    p.issue_cheque_to,
    p.invoice_no,
    p.invoice_date,
    p.invoice_amount,
    p.payment_due_date,
    p.description,
    p.note,
    p.department,
    p.project_name,
    p.approval_status,
    p.location,
    p.request_by,
    p.approved_by,
    p.signature,
    p.checklist,
    p.invoice_file_upload,
    p.createdby,
    p.createddate,
    p.updatedby,
    p.updateddate,
    p.quotation,
    p.po_copy,
    p.checked_invoice_copy,
    p.supporting_documents,
    p.approval,
    p.grn_id,
    p.is_utility_payment,
    p.office,
    p.bill_type,
    p.bill_no,
    p.attached_bill,
    p.isdeleted,
    p.organizationid,
    po.purchase_order_no AS purchase_order_number,
    COALESCE(po.total_without_taxes, 0::numeric::double precision) AS total_without_taxes,
    COALESCE(po.total_taxes, 0::numeric::double precision) AS total_taxes,
    COALESCE(po.grand_total, 0::numeric::double precision) AS grand_total,
    po.currency,
    COALESCE(curr.inr_value, 0::numeric::double precision) AS inr_value,
    COALESCE(po.grand_total, 0::numeric::double precision) * COALESCE(curr.inr_value, 0::numeric::double precision) AS po_grand_total_inr,
    pm.projectname AS project,
    pm.projectpin,
    pa.party_name,
        CASE
            WHEN p.purchase_order_no IS NULL THEN p.invoice_amount
            WHEN p.purchase_order_no IS NOT NULL THEN COALESCE(p.invoice_amount, 0::numeric::double precision) * COALESCE(curr.inr_value, 0::numeric::double precision)
            ELSE NULL::numeric::double precision
        END AS invoice_amt_inr
   FROM ordermgmt.prs_master p
     LEFT JOIN projectmgmt.project pm ON p.project_name::bpchar = pm.entityid::bpchar
     LEFT JOIN ordermgmt.partymaster pa ON p.issue_cheque_to::bpchar = pa.entityid::bpchar
     LEFT JOIN ordermgmt.purchase_order_master po ON p.purchase_order_no::bpchar = po.entityid::bpchar
     LEFT JOIN ticketmgmt.currencymaster curr ON po.currency::bpchar = curr.currency_name::bpchar;

ALTER TABLE ordermgmt.prs_view
  OWNER TO postgres;

  CREATE OR REPLACE VIEW ordermgmt.purchase_order_view AS 
 SELECT p.entityid,
    p.createdby,
    p.createddate,
    p.isdeleted,
    p.organizationid,
    p.updatedby,
    p.updateddate,
    p.purchase_order_no,
    p.order_date,
    p.po_made_from,
    p.rc_id,
    p.order_type,
    p.mode_of_payment,
    p.suppliers_reference,
    p.other_reference,
    p.dispatch_through,
    p.currency,
    p.delivery_term,
    p.invoice_to_address,
    p.supplier_details,
    p.bill_to_address,
    p.ship_to_address,
    p.bill_from_state,
    p.department,
    p.account_name,
    p.terms_conditions,
    p.uploaded_terms_annexure,
    p.additional_terms,
    p.approval_status,
    p.signed_copy,
    p.bill_from_gst_no,
    p.bill_to_gst_no,
    p.supplier_name,
    p.buyer_name,
    p.include_terms,
    p.grand_total,
    p.total_taxes,
    p.total_without_taxes,
    p.discount_amt,
    p.is_historic_data,
    p.old_po_id,
    p.old_po_no,
    p.old_po_date,
    p.is_amended_flag,
    p.amended_po_id,
    p.payment_method,
    p.organisation_id,
    p.verify,
    p.verify_date,
    p.verified_by,
    p.verfied_po_attachment,
    p.mail_sent_date,
    p.mail_sent_by,
    p.po_copy,
    p.workflow_name,
    p.remark,
    pob.po_pushed_status,
    pob.po_pushed_date,
    poh.invoicetoname,
    poh.invoicetoaddressforhistory,
    poh.invoicetocontact,
    poh.invoicetophone,
    poh.invoicetoemail,
    poh.suppliername,
    poh.supplieraddress,
    poh.suppliercontact,
    poh.supplierphone,
    poh.supplieremail,
    poh.billtoname,
    poh.billtoaddressforhistory,
    poh.billtocontact,
    poh.billtophone,
    poh.billtoemail,
    poh.billtogstin,
    poh.shiptoname,
    poh.shiptoaddressforhistory,
    poh.shiptocontact,
    poh.shiptophone,
    poh.shiptoemail,
    supparty.party_name AS supp_name,
    supparty.contact_person_name AS supp_contact_person,
    supparty.mobile_no AS supp_mob,
    supparty.email_id AS supp_email,
    buyparty.party_name AS buy_name,
    buyparty.contact_person_name AS buy_contact_person,
    buyparty.mobile_no AS buy_mob,
    buyparty.email_id AS buy_email,
    supadd.fulladdress AS suppaddress,
    supadd.city AS suppcity,
    supadd.district AS suppdist,
    supadd.state AS supstate,
    buyinvoiceadd.fulladdress AS buyinvoaddress,
    buyinvoiceadd.city AS buyinvocity,
    buyinvoiceadd.district AS buyinvodist,
    buyinvoiceadd.state AS buyinvostate,
    buybilltoadd.fulladdress AS buybilltoaddress,
    buybilltoadd.city AS buybilltocity,
    buybilltoadd.district AS buybilltodist,
    buybilltoadd.state AS buybilltostate,
    buybilltogst.gst_no AS buybilltogstno,
    buyshiptoadd.fulladdress AS buyshiptoaddress,
    buyshiptoadd.city AS buyshiptocity,
    buyshiptoadd.district AS buyshiptodist,
    buyshiptoadd.state AS buyshiptostate,
    supparty.price_list,
    supparty.contact_id,
    dept.departmentname,
    acct.projectname AS acc_name,
    cur.currency_symbol,
    payterm.entityid AS payment_term_id,
    paymethod.entityid AS payment_method_id,
    om.orgname
   FROM ordermgmt.purchase_order_master p
     LEFT JOIN ordermgmt.partymaster supparty ON p.supplier_name::bpchar = supparty.entityid::bpchar
     LEFT JOIN ordermgmt.addressmaster supadd ON p.supplier_details::bpchar = supadd.entityid::bpchar
     LEFT JOIN ordermgmt.partymaster buyparty ON p.buyer_name::bpchar = buyparty.entityid::bpchar
     LEFT JOIN ordermgmt.addressmaster buyinvoiceadd ON p.invoice_to_address::bpchar = buyinvoiceadd.entityid::bpchar
     LEFT JOIN ordermgmt.addressmaster buybilltoadd ON p.bill_to_address::bpchar = buybilltoadd.entityid::bpchar
     LEFT JOIN ordermgmt.gstmaster buybilltogst ON buybilltoadd.state::bpchar = buybilltogst.state::bpchar AND buyparty.entityid::bpchar = buybilltogst.party_id::bpchar
     LEFT JOIN ordermgmt.addressmaster buyshiptoadd ON p.ship_to_address::bpchar = buyshiptoadd.entityid::bpchar
     LEFT JOIN authentication.department dept ON p.department::bpchar = dept.entityid::bpchar
     LEFT JOIN projectmgmt.project acct ON p.account_name::bpchar = acct.entityid::bpchar
     LEFT JOIN authentication.organization om ON p.organisation_id::bpchar = om.entityid::bpchar
     LEFT JOIN ticketmgmt.currencymaster cur ON p.currency::bpchar = cur.currency_name::bpchar
     LEFT JOIN ordermgmt.constant_master payterm ON p.mode_of_payment::bpchar = payterm.value::bpchar AND payterm.type::text = 'PM'::text AND p.organisation_id::bpchar = payterm.organisation_id::bpchar
     LEFT JOIN ordermgmt.constant_master paymethod ON p.payment_method::bpchar = paymethod.value::bpchar AND paymethod.type::text = 'PMethod'::text AND p.organisation_id::bpchar = paymethod.organisation_id::bpchar
     LEFT JOIN ordermgmt.purchase_order_history_details poh ON p.entityid::bpchar = poh.purchase_order_id::bpchar
     LEFT JOIN ordermgmt.purchase_order_open_bravo_details pob ON p.entityid::bpchar = pob.purchase_order_id::bpchar;

ALTER TABLE ordermgmt.purchase_order_view
  OWNER TO postgres;
CREATE OR REPLACE VIEW ordermgmt.rate_contract_view AS 
 SELECT p.entityid,
    p.createdby,
    p.createddate,
    p.isdeleted,
    p.organizationid,
    p.updatedby,
    p.updateddate,
    p.rate_contract_no,
    p.contract_date,
    p.contract_type,
    p.mode_of_payment,
    p.suppliers_reference,
    p.other_reference,
    p.dispatch_through,
    p.currency,
    p.delivery_term,
    p.invoice_to_address,
    p.supplier_details,
    p.bill_to_address,
    p.ship_to_address,
    p.bill_from_state,
    p.department,
    p.account_name,
    p.terms_conditions,
    p.uploaded_terms_annexure,
    p.additional_terms,
    p.approval_status,
    p.signed_copy,
    p.bill_from_gst_no,
    p.bill_to_gst_no,
    p.supplier_name,
    p.buyer_name,
    p.include_terms,
    p.grand_total,
    p.total_taxes,
    p.total_without_taxes,
    p.is_historic_data,
    p.organisation_id,
    p.workflow_name,
    p.remark,
    p.valid_till,
    p.max_limit,
    poh.invoicetoname,
    poh.invoicetoaddressforhistory,
    poh.invoicetocontact,
    poh.invoicetophone,
    poh.invoicetoemail,
    poh.suppliername,
    poh.supplieraddress,
    poh.suppliercontact,
    poh.supplierphone,
    poh.supplieremail,
    poh.billtoname,
    poh.billtoaddressforhistory,
    poh.billtocontact,
    poh.billtophone,
    poh.billtoemail,
    poh.billtogstin,
    poh.shiptoname,
    poh.shiptoaddressforhistory,
    poh.shiptocontact,
    poh.shiptophone,
    poh.shiptoemail,
    supparty.party_name AS supp_name,
    supparty.contact_person_name AS supp_contact_person,
    supparty.mobile_no AS supp_mob,
    supparty.email_id AS supp_email,
    buyparty.party_name AS buy_name,
    buyparty.contact_person_name AS buy_contact_person,
    buyparty.mobile_no AS buy_mob,
    buyparty.email_id AS buy_email,
    supadd.fulladdress AS suppaddress,
    supadd.city AS suppcity,
    supadd.district AS suppdist,
    supadd.state AS supstate,
    buyinvoiceadd.fulladdress AS buyinvoaddress,
    buyinvoiceadd.city AS buyinvocity,
    buyinvoiceadd.district AS buyinvodist,
    buyinvoiceadd.state AS buyinvostate,
    buybilltoadd.fulladdress AS buybilltoaddress,
    buybilltoadd.city AS buybilltocity,
    buybilltoadd.district AS buybilltodist,
    buybilltoadd.state AS buybilltostate,
    buybilltogst.gst_no AS buybilltogstno,
    buyshiptoadd.fulladdress AS buyshiptoaddress,
    buyshiptoadd.city AS buyshiptocity,
    buyshiptoadd.district AS buyshiptodist,
    buyshiptoadd.state AS buyshiptostate,
    dept.departmentname,
    acct.projectname AS acc_name,
    cur.currency_symbol,
    om.orgname
   FROM ordermgmt.rate_contract_master p
     LEFT JOIN ordermgmt.partymaster supparty ON p.supplier_name::bpchar = supparty.entityid::bpchar
     LEFT JOIN ordermgmt.addressmaster supadd ON p.supplier_details::bpchar = supadd.entityid::bpchar
     LEFT JOIN ordermgmt.partymaster buyparty ON p.buyer_name::bpchar = buyparty.entityid::bpchar
     LEFT JOIN ordermgmt.addressmaster buyinvoiceadd ON p.invoice_to_address::bpchar = buyinvoiceadd.entityid::bpchar
     LEFT JOIN ordermgmt.addressmaster buybilltoadd ON p.bill_to_address::bpchar = buybilltoadd.entityid::bpchar
     LEFT JOIN ordermgmt.gstmaster buybilltogst ON buybilltoadd.state::bpchar = buybilltogst.state::bpchar AND buyparty.entityid::bpchar = buybilltogst.party_id::bpchar
     LEFT JOIN ordermgmt.addressmaster buyshiptoadd ON p.ship_to_address::bpchar = buyshiptoadd.entityid::bpchar
     LEFT JOIN authentication.department dept ON p.department::bpchar = dept.entityid::bpchar
     LEFT JOIN projectmgmt.project acct ON p.account_name::bpchar = acct.entityid::bpchar
     LEFT JOIN authentication.organization om ON p.organisation_id::bpchar = om.entityid::bpchar
     LEFT JOIN ticketmgmt.currencymaster cur ON p.currency::bpchar = cur.currency_name::bpchar
     LEFT JOIN ordermgmt.purchase_order_history_details poh ON p.entityid::bpchar = poh.purchase_order_id::bpchar;

ALTER TABLE ordermgmt.rate_contract_view
  OWNER TO postgres;
  CREATE OR REPLACE VIEW ordermgmt.rc_product_details_view AS 
 SELECT pd.entityid,
    pd.createdby,
    pd.createddate,
    pd.isdeleted,
    pd.organizationid,
    pd.updatedby,
    pd.updateddate,
    pd.amount,
    pd.base_uom_data,
    pd.cgst,
    pd.cgst_amount,
    pd.description,
    pd.discount,
    pd.discount_amount,
    pd.final_amount,
    pd.hsn_id,
    pd.igst,
    pd.igst_amount,
    pd.product_name,
    pd.product_name_with_desc,
    pd.quantity,
    pd.rate,
    pd.service_tax,
    pd.sgst,
    pd.sgst_amount,
    pd.total_amount,
    pd.total_discount,
    pd.vat,
    pd.rate_contract_no,
    pm.productname AS product,
    pm.description AS product_desc,
    pm.baseuom,
    hm.entityid AS tax_id
   FROM ordermgmt.rate_contract_product_details pd
     LEFT JOIN assetmgmt.productmaster pm ON pd.product_name::bpchar = pm.entityid::bpchar
     LEFT JOIN assetmgmt.hsnmaster hm ON pd.hsn_id::bpchar = hm.hsncode::bpchar;

ALTER TABLE ordermgmt.rc_product_details_view
  OWNER TO postgres;
CREATE OR REPLACE VIEW ordermgmt.rc_task_view AS 
 SELECT pt.entityid,
    pt.rc_id,
    pt.po_rc_flag,
    pt.upload_file,
    t.createdby,
    t.createddate,
    t.isdeleted,
    t.organizationid,
    t.updatedby,
    t.updateddate,
    t.approvalstatus,
    t.assigntorole,
    t.assigntouser,
    t.remark,
    t.stagename,
    t.workflowname,
    rc.rate_contract_no,
    rc.approval_status AS po_approval_status,
    rc.supplier_name,
    rc.account_name,
    rc.organisation_id
   FROM ordermgmt.rctaskmaster pt
     LEFT JOIN taskmaster t ON pt.entityid::bpchar = t.entityid::bpchar
     LEFT JOIN ordermgmt.rate_contract_master rc ON pt.rc_id::bpchar = rc.entityid::bpchar;

ALTER TABLE ordermgmt.rc_task_view
  OWNER TO postgres;


CREATE OR REPLACE VIEW ordermgmt.all_task_view AS 
 SELECT po.entityid,
    po.po_id,
    po.po_rc_flag,
    po.upload_file,
    po.createdby,
    po.createddate,
    po.isdeleted,
    po.organizationid,
    po.updatedby,
    po.updateddate,
    po.approvalstatus,
    po.assigntorole,
    po.assigntouser,
    po.remark,
    po.stagename,
    po.workflowname,
    po.purchase_order_no,
    po.po_approval_status,
    po.supplier_name,
    po.account_name,
    po.organisation_id
   FROM ordermgmt.po_task_view po
UNION ALL
 SELECT rc.entityid,
    rc.rc_id AS po_id,
    rc.po_rc_flag,
    rc.upload_file,
    rc.createdby,
    rc.createddate,
    rc.isdeleted,
    rc.organizationid,
    rc.updatedby,
    rc.updateddate,
    rc.approvalstatus,
    rc.assigntorole,
    rc.assigntouser,
    rc.remark,
    rc.stagename,
    rc.workflowname,
    rc.rate_contract_no AS purchase_order_no,
    rc.po_approval_status,
    rc.supplier_name,
    rc.account_name,
    rc.organisation_id
   FROM ordermgmt.rc_task_view rc;

ALTER TABLE ordermgmt.all_task_view
  OWNER TO postgres;
  CREATE OR REPLACE VIEW projectmgmt.project_task_view AS 
 SELECT pt.entityid AS taskid,
    t.approvalstatus,
    t.workflowname,
    pt.projectid,
    p.budget,
    p.clientname,
    p.completionstatus,
    p.departmentname,
    p.percentagecompleted,
    p.percentagepaymentreceived,
    p.planattachment,
    p.poattached,
    p.poattachment,
    p.projectlocation,
    p.projectname,
    p.projectpin,
    p.projectplan,
    p.projectstartdate,
    p.projectstatus,
    p.projectstopdate,
    p.projecttype,
    p.remark,
    p.organization,
    p.practicename,
    p.accountmanager,
    p.projectmanager,
    concat(up.firstname, ' ', up.lastname) AS accountmanagername,
    concat(up1.firstname, ' ', up1.lastname) AS projectmanagername,
    t.assigntorole,
    t.assigntouser,
    t.updatedby
   FROM projectmgmt.project_approval_task pt
     LEFT JOIN projectmgmt.project p ON p.entityid = pt.projectid
     LEFT JOIN authentication.userprofile up ON up.entityid = p.accountmanager
     JOIN authentication.userprofile up1 ON up1.entityid = p.projectmanager
     LEFT JOIN taskmaster t ON t.entityid = pt.entityid;

ALTER TABLE projectmgmt.project_task_view
  OWNER TO postgres;

  CREATE OR REPLACE VIEW projectmgmt.project_view AS 
 SELECT p.entityid,
    p.approvalstatus,
    p.budget,
    p.clientname,
    p.completionstatus,
    p.departmentname,
    p.percentagecompleted,
    p.percentagepaymentreceived,
    p.planattachment,
    p.poattached,
    p.poattachment,
    p.projectlocation,
    p.projectname,
    p.projectpin,
    p.projectplan,
    p.projectstartdate,
    p.projectstatus,
    p.projectstopdate,
    p.projecttype,
    p.remark,
    p.organization,
    p.practicename,
    p.accountmanager,
    p.projectmanager,
    concat(up.firstname, ' ', up.lastname) AS accountmanagername,
    concat(up1.firstname, ' ', up1.lastname) AS projectmanagername,
    p.isdeleted
   FROM projectmgmt.project p
     LEFT JOIN authentication.userprofile up ON up.entityid = p.accountmanager
     JOIN authentication.userprofile up1 ON up1.entityid = p.projectmanager;

ALTER TABLE projectmgmt.project_view
  OWNER TO postgres;
  CREATE OR REPLACE VIEW projectmgmt.project_workflowlevel_mapping_view AS 
 SELECT p.entityid,
    p.orgid,
    p.projectid,
    p.userid,
    p.workflowlevel,
    om.orgname,
    pm.projectname,
    concat(cp.firstname, ' ', cp.lastname) AS username,
    cp.emailid,
    cp.mobileappkey
   FROM projectmgmt.project_workflowlevel_mapping p
     LEFT JOIN authentication.userprofile cp ON p.userid = cp.entityid
     LEFT JOIN authentication.organization om ON p.orgid = om.entityid
     LEFT JOIN projectmgmt.project pm ON p.projectid = pm.entityid;

ALTER TABLE projectmgmt.project_workflowlevel_mapping_view
  OWNER TO postgres;
  
  CREATE OR REPLACE VIEW ticketmgmt.ticket_classifications_view AS 
 SELECT t.projectid,
    t.classificationvalue,
    t.isdeleted,
    t.createdby,
    t.createddate,
    t.updatedby,
    t.updateddate,
    t.organizationid,
    p.projectname
   FROM ticketmgmt.ticketclassification t
     LEFT JOIN projectmgmt.project p ON t.projectid::bpchar = p.entityid::bpchar;

ALTER TABLE ticketmgmt.ticket_classifications_view
  OWNER TO postgres;

  CREATE OR REPLACE VIEW ticketmgmt.ticket_problem_view AS 
 SELECT tp.projectid,
    tp.problemreportvalue,
    p.projectname
   FROM ticketmgmt.ticketproblemreport tp
     LEFT JOIN projectmgmt.project p ON tp.projectid::bpchar = p.entityid::bpchar;

ALTER TABLE ticketmgmt.ticket_problem_view
  OWNER TO postgres;

CREATE OR REPLACE VIEW ticketmgmt.ticketmaster_view AS 
 SELECT p.entityid,
    p.ticketstatus,
    p.ticketclosedtime,
    p.category,
    p.classifications,
    p.duedate,
    p.contactemail,
    p.channel,
    p.phone,
    p.tickettitle,
    p.resolution,
    p.subcategory,
    p.toaddress,
    p.accountname,
    p.description,
    p.contactname,
    p.ticketowner,
    p.tickettype,
    p.ticketno,
    p.resolutiondate,
    p.assetid,
    p.district,
    p.location,
    p.attachment,
    p.vehiclesused,
    p.otherproblemdesc,
    p.department,
    p.ticketcategory,
    p.ticketsubcategory,
    p.createdby,
    p.createddate,
    p.assettag,
    p.isdeleted,
    p.assignname,
    p.otherproblemdescription,
    p.draftflag,
    p.email,
    p.mobileno,
    up.firstname AS assignto,
    userpro.firstname AS username,
    userpro.mobilenumber,
    userpro.emailid,
    am.assetname,
    pro.projectname AS projetname
   FROM ticketmgmt.ticketmaster p
     LEFT JOIN assetmgmt.assetmaster pm ON p.assetid::bpchar = pm.entityid::bpchar
     LEFT JOIN assetmgmt.assetmaster am ON p.assetid::bpchar = am.entityid::bpchar
     LEFT JOIN authentication.userprofile userpro ON p.ticketowner::bpchar = userpro.entityid::bpchar
     LEFT JOIN authentication.userprofile up ON p.assignname::bpchar = up.entityid::bpchar
     LEFT JOIN projectmgmt.project pro ON p.accountname::bpchar = pro.entityid::bpchar;

ALTER TABLE ticketmgmt.ticketmaster_view
  OWNER TO postgres;
  
CREATE OR REPLACE VIEW ticketmgmt.ticket_task_view AS 
 SELECT t.entityid,
    p.ticketstatus,
    t.ticketno,
    t.assignname,
    t.escalatedon,
    t.escalatedto,
    t.latitude,
    t.longitude,
    t.vendorname,
    t.contactemail AS email,
    t.accountname,
    u.firstname,
    uf.firstname AS ticketownername,
    tm.assetname,
    tm.location,
    tm.duedate,
    tm.resolution,
    p.updateddate,
    p.updatedby,
    p.organizationid,
    p.isdeleted,
    p.ticketowner,
    p.createdby,
    p.createddate,
    p.assetid,
    p.tickettype,
    p.tickettitle,
    p.otherproblemdescription,
    u.username,
    p.contactemail
   FROM ticketmgmt.tickettask t
     LEFT JOIN ticketmgmt.ticketmaster_view tm ON t.ticketno::text = tm.ticketno::text
     LEFT JOIN ticketmgmt.ticketmaster p ON t.ticketno::text = p.ticketno::text
     LEFT JOIN authentication.userprofile uf ON p.ticketowner::text = uf.entityid::text
     LEFT JOIN authentication.userprofile u ON t.assignname::text = u.entityid::text;

ALTER TABLE ticketmgmt.ticket_task_view
  OWNER TO postgres;

  CREATE OR REPLACE VIEW ticketmgmt.vendor_view AS 
 SELECT g.entityid,
    g.project,
    g.vendorname,
    g.emailid,
    g.ccemaildl,
    g.dailyemaildl,
    g.contact,
    g.emailformat,
    g.emailsubject,
    g.accountname,
    acc.projectpin
   FROM ticketmgmt.vendor g
     LEFT JOIN projectmgmt.project acc ON g.project::bpchar = acc.entityid::bpchar;

ALTER TABLE ticketmgmt.vendor_view
  OWNER TO postgres;
  
  CREATE OR REPLACE FUNCTION public.escalation_mail(
    mail_subject text,
    mail_body text,
    day integer)
  RETURNS boolean AS
$BODY$
  DECLARE
    r authentication.user_view%rowtype;
    msg character varying (1000);
      BEGIN
	   FOR r IN		
		Select * from authentication.user_view
		where entityid not in (
			select distinct(userid) from healthmgmt.self_assessment where TO_DATE(to_char(to_timestamp(assessmentdate / 1000.0), 'DD/MM/YYYY'), 'DD/MM/YYYY') 
			BETWEEN  CURRENT_DATE - INTERVAL '1 DAY' and CURRENT_DATE)
	LOOP
	 msg = replace($2, 'USER', r.profilename);

		INSERT INTO public.email_table(
            entityid, createdby, createddate, isdeleted, organizationid, 
            updatedby, updateddate, attachment, attempt, bccemailid, ccemailid, 
            emailbody, emailid, emailstatus, emailsubject, senddate)
    VALUES (nextval('entity_sequence'), 'SYSTEM', (extract(epoch from current_timestamp) * 1000), false, 1, 
            null, null, null, null, null, r.useremail, 
            msg, r.manager, 'ESCALATED', $1, null);
		
	  END LOOP;
	  
	RETURN 'TRUE';	
      END;
  $BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.escalation_mail(text, text, integer)
  OWNER TO postgres;

  CREATE OR REPLACE FUNCTION public.reminder_mail(
    mail_subject text,
    mail_body text)
  RETURNS boolean AS
$BODY$
  DECLARE
    r authentication.userprofile%rowtype;
      BEGIN
	   FOR r IN
			SELECT * FROM authentication.userprofile
	LOOP
		
		INSERT INTO public.email_table(
            entityid, createdby, createddate, isdeleted, organizationid, 
            updatedby, updateddate, attachment, attempt, bccemailid, ccemailid, 
            emailbody, emailid, emailstatus, emailsubject, senddate)
    VALUES (nextval('entity_sequence'), 'SYSTEM', (extract(epoch from current_timestamp) * 1000), false, 1, 
            null, null, null, null, null, null, 
            $2, r.emailid, 'REMINDER', $1, null);
		
	  END LOOP;
	  
	RETURN 'TRUE';	
      END;
  $BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100;
ALTER FUNCTION public.reminder_mail(text, text)
  OWNER TO postgres;
CREATE OR REPLACE FUNCTION projectmgmt.getallproject(IN userid bigint)
  RETURNS TABLE(id bigint, projectname character varying) AS
$BODY$
  Select distinct * from (SELECT ppm.entityid, ppm.projectname
		 		FROM projectmgmt.project ppm
		 		LEFT JOIN projectmgmt.project_workflowlevel_mapping plm ON plm.projectid = ppm.entityid
		 		where userid = $1
		 		and (ppm.isdeleted =FALSE)
		 		union all
		 		select pm.entityid, pm.projectname from projectmgmt.project pm
		 		where pm.accountmanager = $1 or pm.projectmanager =  $1
		 		and (pm.isdeleted =FALSE)
		 		union all 
		 		select pm.entityid, pm.projectname FROM projectmgmt.project pm
		 		LEFT JOIN authentication.organization org ON pm.organization = org.entityid
		 		WHERE NOT EXISTS(SELECT * FROM authentication.user_roles r1 
		 		where r1.userprofile_entityid = $1 and r1.roles_rolename IN ('ROLE_USER')) 
		 		AND org.orgname = 'STAR ORGANIZATION'
		 		and (pm.isdeleted =FALSE))AS PMS
$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION projectmgmt.getallproject(bigint)
  OWNER TO postgres;

  CREATE OR REPLACE FUNCTION projectmgmt.getproject(IN userid bigint)
  RETURNS TABLE(id bigint, projectname character varying) AS
$BODY$
  Select distinct * from (SELECT ppm.entityid, ppm.projectname
		 		FROM projectmgmt.project ppm
		 		LEFT JOIN projectmgmt.project_workflowlevel_mapping plm ON plm.projectid = ppm.entityid
		 		where userid = $1
		 		and (ppm.isdeleted =FALSE) AND (ppm.approvalstatus = 'APPROVED')
		 		union all
		 		select pm.entityid, pm.projectname from projectmgmt.project pm
		 		where pm.accountmanager = $1 or pm.projectmanager =  $1
		 		and (pm.isdeleted =FALSE) AND (pm.approvalstatus = 'APPROVED')
		 		union all 
		 		select pm.entityid, pm.projectname FROM projectmgmt.project pm
		 		LEFT JOIN authentication.organization org ON pm.organization = org.entityid
		 		WHERE NOT EXISTS(SELECT * FROM authentication.user_roles r1 
		 		where r1.userprofile_entityid = $1 and r1.roles_rolename IN ('ROLE_USER')) 
		 		AND org.orgname = 'STAR ORGANIZATION'
		 		and (pm.isdeleted =FALSE) AND (pm.approvalstatus = 'APPROVED'))AS PMS
$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION projectmgmt.getproject(bigint)
  OWNER TO postgres;

  CREATE OR REPLACE FUNCTION projectmgmt.gettaskbaseonproject(IN userid bigint)
  RETURNS TABLE(id bigint, level character varying) AS
$BODY$
  SELECT p.projectid,p.workflowlevel FROM projectmgmt.project_workflowlevel_mapping p
					LEFT JOIN projectmgmt.project pm ON p.projectid = pm.entityid
					where p.userid = $1 and (pm.isdeleted =false) AND (pm.approvalstatus ='APPROVED')
$BODY$
  LANGUAGE sql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION projectmgmt.gettaskbaseonproject(bigint)
  OWNER TO postgres;
  
#####################################################################################

CREATE OR REPLACE VIEW ordermgmt.prs_task_view AS 
 SELECT pt.entityid AS taskid,
    t.approvalstatus,
    t.workflowname,
    t.assigntorole,
    t.assigntouser,
    pt.prs_id,
    p.prs_no,
    p.prs_date,
    p.purchase_order_no,
    p.issue_cheque_to,
    p.invoice_no,
    p.invoice_date,
    p.invoice_amount,
    p.payment_due_date,
    p.description,
    p.note,
    p.department,
    p.project_name,
    p.approval_status,
    p.location,
    p.request_by,
    p.approved_by,
    p.signature,
    p.checklist,
    p.invoice_file_upload,
    p.createdby,
    p.createddate,
    p.updatedby,
    p.updateddate,
    p.quotation,
    p.po_copy,
    p.checked_invoice_copy,
    p.supporting_documents,
    p.approval,
    p.grn_id,
    p.is_utility_payment,
    p.office,
    p.bill_type,
    p.bill_no,
    p.attached_bill,
    p.isdeleted,
    p.organizationid,
    po.purchase_order_no AS purchase_order_number,
    COALESCE(po.total_without_taxes, 0::numeric::double precision) AS total_without_taxes,
    COALESCE(po.total_taxes, 0::numeric::double precision) AS total_taxes,
    COALESCE(po.grand_total, 0::numeric::double precision) AS grand_total,
    po.currency,
    COALESCE(curr.inr_value, 0::numeric::double precision) AS inr_value,
    COALESCE(po.grand_total, 0::numeric::double precision) * COALESCE(curr.inr_value, 0::numeric::double precision) AS po_grand_total_inr,
    pm.projectname AS project,
    pm.projectpin,
    pa.party_name,
        CASE
            WHEN p.purchase_order_no IS NULL THEN p.invoice_amount
            WHEN p.purchase_order_no IS NOT NULL THEN COALESCE(p.invoice_amount, 0::numeric::double precision) * COALESCE(curr.inr_value, 0::numeric::double precision)
            ELSE NULL::numeric::double precision
        END AS invoice_amt_inr
   FROM ordermgmt.prstask pt
     LEFT JOIN ordermgmt.prs_master p ON pt.prs_id::bpchar = p.entityid::bpchar
     LEFT JOIN projectmgmt.project pm ON p.project_name::bpchar = pm.entityid::bpchar
     LEFT JOIN ordermgmt.partymaster pa ON p.issue_cheque_to::bpchar = pa.entityid::bpchar
     LEFT JOIN ordermgmt.purchase_order_master po ON p.purchase_order_no::bpchar = po.entityid::bpchar
     LEFT JOIN ticketmgmt.currencymaster curr ON po.currency::bpchar = curr.currency_name::bpchar
     LEFT JOIN taskmaster t ON t.entityid = pt.entityid;

ALTER TABLE ordermgmt.prs_task_view
  OWNER TO postgres;
  
  #######################################################################################
  
  CREATE OR REPLACE VIEW ticketmgmt.ticket_task_view AS 
 SELECT tm.entityid,
    tm.approvalstatus,
    t.ticketno,
    tm.assigntouser,
    tm.assigntorole,
    t.escalatedon,
    t.escalatedto,
    t.latitude,
    t.longitude,
    t.vendorname,
    p.accountname,
    concat(uf.firstname, ' ', uf.lastname)::character varying(200) AS ticketownername,
    pm.assetname,
    p.isdeleted,
    p.tickettype,
    p.tickettitle,
    p.otherproblemdescription,
    p.entityid AS ticketid
   FROM ticketmgmt.tickettask t
     LEFT JOIN taskmaster tm ON tm.entityid = t.entityid
     LEFT JOIN ticketmgmt.ticketmaster p ON t.ticketno::text = p.ticketno::text
     LEFT JOIN authentication.userprofile uf ON p.ticketowner = uf.entityid
     LEFT JOIN assetmgmt.assetmaster pm ON p.assetid::bpchar = pm.entityid::bpchar;

ALTER TABLE ticketmgmt.ticket_task_view
  OWNER TO postgres;
  
  ##############################################################################
